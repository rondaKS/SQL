/* Create table about the people and what they do here */

--Information from data.world 2018-people file located here: https://data.world/the-pudding/celebrity-billboard-project

CREATE TABLE actors (id INTEGER PRIMARY KEY AUTOINCREMENT,     first_name TEXT, 
    last_name TEXT, 
    birth_year INTEGER);
    
INSERT INTO actors(first_name, last_name, birth_year)
VALUES ("Kirk", "Douglas", 1916),
("Tommy", "Wiseau", 1955),
("Nicole", "Eggert", 1972),
("Uma", "Thurman", 1970),
("Jessica", "Biel", 1982),
("Maya", "Angelou", 1928);

CREATE TABLE performances (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, year INTEGER, type_id INTEGER, actor_id INTEGER);

INSERT INTO performances(title, year, type_id,actor_id)
VALUES ("The Strange Love of Martha Ivers", 1946,1,1),
("The Room", 2003,1,2),
("Homeless in America",2004,1,2),
("Charles in Charge",1987,2,3),
("Baywatch", 1992, 2, 3),
("Dangerous Liaisons",1988,1,4), 
("Pulp Fiction", 1994,1,4),
("7th Heaven", 1996, 2,5), 
("The Sinner", 2017, 2,5),
("I Know Why the Caged Bird Sings",1969,1,6); 

CREATE TABLE performance_types (id INTEGER PRIMARY KEY AUTOINCREMENT, description TEXT);

INSERT INTO performance_types (description)
VALUES ("movie"),
("television series");

CREATE TABLE roles(id INTEGER PRIMARY KEY AUTOINCREMENT, role TEXT);

INSERT INTO roles(role)
VALUES ("actor"),
("producer"), 
("director"),
("author"),
("model"),
("singer"), 
("poet"),
("memoirist"),
("activist");

CREATE TABLE actor_roles(actors_id INTEGER, roles_id INTEGER);

INSERT INTO actor_roles(actors_id, roles_id)
VALUES (1,1),
(1,2),
(1,3),
(1,4),
(2,1),
(2,2),
(2,3),
(3,1),
(4,1),
(4,5),
(5,1),
(5,5),
(5,2),
(5,6),
(6,1),
(6,6),
(6,7),
(6,9);

--List of all actors performance and performance type sorted by actor last name.

SELECT first_name AS "First Name", 
last_name AS "Last Name", 
title AS "Title", 
description AS "Performance Type"
 FROM actors
 LEFT JOIN performances 
   ON performances.actor_id = actors.id
 LEFT JOIN performance_types
   ON performance_types.id = type_id
ORDER BY last_name;
  
--Actors Age at time of performance
SELECT first_name AS "First Name", 
last_name AS "Last Name", 
title AS "Title", 
(performances.year-actors.birth_year) AS Age
 FROM actors
 JOIN performances 
   ON actors.id = performances.actor_id;

--Actors with how many roles with the highest number listed first.
SELECT first_name AS "First Name", 
last_name AS "Last Name", 
count(role) AS "Number of Roles"
 FROM actors
 LEFT JOIN actor_roles
   ON actors.id = actor_roles.actors_id
 JOIN roles
   ON actor_roles.roles_id = roles.id
GROUP BY last_name
ORDER BY count(role) DESC;
